function varargout = display3d(varargin)
% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @display3d_OpeningFcn, ...
                   'gui_OutputFcn',  @display3d_OutputFcn, ...
                   'gui_LayoutFcn',  @display3d_LayoutFcn, ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before display3d is made visible.
function display3d_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to display3d (see VARARGIN)

% Choose default command line output for display3d
handles.output = hObject;

if isempty(varargin{1})
    bg = zeros(size(varargin{2}));
else
    bg = double(varargin{1});
    bg_idx = bg~=0;
    bg_min = min(bg(bg_idx));
    bg_max = max(bg(bg_idx));
    if bg_min == bg_max
        bg_min = 0;
    end
end
handles.bg = bg;

ol = double(varargin{2});
ol_idx = ol~=0;
ol_min = min(ol(ol_idx));
ol_max = max(ol(ol_idx));
if ol_min == ol_max
    ol_min = 0;
end
handles.ol = ol;

combined = zeros(size(bg));
if ~isempty(varargin{1})
    combined(bg_idx) = (bg(bg_idx) - bg_min) / (bg_max - bg_min) * 127 + 1;
end
combined(ol_idx) = (ol(ol_idx) - ol_min) / (ol_max - ol_min) * 127 + 129;
handles.combined = combined;

cmap = hot(150);
cmap = [gray(128); flipud(cmap(23:150,:))];
handles.cmap = cmap;

dims=size(combined);
if ~isempty(varargin{3})
    [temp1,temp2,temp3]=ind2sub(dims,varargin{3});
    handles.cursor=[temp1,temp2,temp3];
else
    handles.cursor=int16(dims/2);
end

% Update handles structure
guidata(hObject, handles);

movegui(hObject,'center')

actDataLoaded(hObject, eventdata, handles);


% --- Outputs from this function are returned to the command line.
function varargout = display3d_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


function actDataLoaded(hObject, eventdata, handles)

dims=size(handles.combined);

set(handles.xslider, 'Min', 1 );
set(handles.xslider, 'Max', dims(1));
set(handles.xslider, 'Value', handles.cursor(1) );
set(handles.xslider, 'SliderStep', [1/(dims(1)-1) 10/(dims(1)-1)]);
%
set(handles.xview, 'NextPlot','Replace');
colormap(handles.xview, handles.cmap);
xslice=imrotate(squeeze(handles.combined(handles.cursor(1),:,:)),90);
image([1 size(xslice,2)], [1 size(xslice,1)], xslice, 'Parent', handles.xview);
set(handles.xview,'XTick',[]);
set(handles.xview,'YTick',[]);
set(handles.xview,'XAxisLocation','top');
%
axes(handles.xview);
hline = line('XData',get(handles.xview,'XLim'), 'YData',dims(3)-[handles.cursor(3) handles.cursor(3)]+1, 'Tag','HCursor','Color','b');
vline = line('XData',[handles.cursor(2) handles.cursor(2)], 'YData',get(handles.xview,'YLim'), 'Tag','VCursor','Color','b');
%
set(handles.xlabel, 'String', ['X: ' num2str(handles.cursor(1)) '/' num2str(dims(1))]);

set(handles.yslider, 'Min', 1 );
set(handles.yslider, 'Max', dims(2));
set(handles.yslider, 'Value', handles.cursor(2) );
set(handles.yslider, 'SliderStep', [1/(dims(2)-1) 10/(dims(2)-1)]);
%
set(handles.yview, 'NextPlot','Replace');
colormap(handles.yview, handles.cmap);
yslice=imrotate(squeeze(handles.combined(:,handles.cursor(2),:)),90);
image([1 size(yslice,2)], [1 size(yslice,1)], yslice, 'Parent', handles.yview);
set(handles.yview,'XTick',[]);
set(handles.yview,'YTick',[]);
set(handles.yview,'XAxisLocation','top');
%
axes(handles.yview);
hline = line('XData',get(handles.yview,'XLim'), 'YData',dims(3)-[handles.cursor(3) handles.cursor(3)]+1, 'Tag','HCursor','Color','b');
vline = line('XData',[handles.cursor(1) handles.cursor(1)], 'YData',get(handles.yview,'YLim'), 'Tag','VCursor','Color','b');
%
set(handles.ylabel, 'String', ['Y: ' num2str(handles.cursor(2)) '/' num2str(dims(2))]);

set(handles.zslider, 'Min', 1 );
set(handles.zslider, 'Max', dims(3));
set(handles.zslider, 'Value', handles.cursor(3) );
set(handles.zslider, 'SliderStep', [1/(dims(3)-1) 10/(dims(3)-1)]);
%
set(handles.zview, 'NextPlot','Replace');
colormap(handles.zview, handles.cmap);
zslice=imrotate(squeeze(handles.combined(:,:,handles.cursor(3))),90);
image([1 size(zslice,2)], [1 size(zslice,1)], zslice, 'Parent', handles.zview);
set(handles.zview,'XTick',[]);
set(handles.zview,'YTick',[]);
set(handles.zview,'XAxisLocation','top');
%
axes(handles.zview);
hline = line('XData',get(handles.zview,'XLim'), 'YData',dims(2)-[handles.cursor(2) handles.cursor(2)]+1, 'Tag','HCursor','Color','b');
vline = line('XData',[handles.cursor(1) handles.cursor(1)], 'YData',get(handles.zview,'YLim'), 'Tag','VCursor','Color','b');
%
set(handles.zlabel, 'String', ['Z: ' num2str(handles.cursor(3)) '/' num2str(dims(3))]);

set(handles.coords, 'String', num2str(handles.cursor));
set(handles.bgvalue, 'String', num2str(handles.bg(handles.cursor(1),handles.cursor(2),handles.cursor(3))));
set(handles.olvalue, 'String', num2str(handles.ol(handles.cursor(1),handles.cursor(2),handles.cursor(3))));

guidata(hObject,handles)


% --- Executes on slider movement.
function xslider_Callback(hObject, eventdata, handles)
% hObject    handle to xslider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

dims=size(handles.combined);
handles.cursor(1)=int16(get(hObject, 'Value'));
xslice=imrotate(squeeze(handles.combined(handles.cursor(1),:,:)),90);

imghandle=findobj(handles.xview, 'Type','image');
set(imghandle, 'CData',xslice);

set(handles.xlabel, 'String', ['X: ' num2str(handles.cursor(1)) '/' num2str(dims(1))]);

guidata(hObject,handles)

doCommonUpdate(handles,'x')


% --- Executes during object creation, after setting all properties.
function xslider_CreateFcn(hObject, eventdata, handles)
% hObject    handle to xslider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


% --- Executes on slider movement.
function yslider_Callback(hObject, eventdata, handles)
% hObject    handle to yslider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

dims=size(handles.combined);
handles.cursor(2)=int16(get(hObject, 'Value'));
yslice=imrotate(squeeze(handles.combined(:,handles.cursor(2),:)),90);

imghandle=findobj(handles.yview, 'Type','image');
set(imghandle, 'CData',yslice);

set(handles.ylabel, 'String', ['Y: ' num2str(handles.cursor(2)) '/' num2str(dims(2))]);

guidata(hObject,handles)

doCommonUpdate(handles,'y')


% --- Executes during object creation, after setting all properties.
function yslider_CreateFcn(hObject, eventdata, handles)
% hObject    handle to yslider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


% --- Executes on slider movement.
function zslider_Callback(hObject, eventdata, handles)
% hObject    handle to zslider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

dims=size(handles.combined);
handles.cursor(3)=int16(get(hObject, 'Value'));
zslice=imrotate(squeeze(handles.combined(:,:,handles.cursor(3))),90);

imghandle=findobj(handles.zview, 'Type','image');
set(imghandle, 'CData',zslice);

set(handles.zlabel, 'String', ['Z: ' num2str(handles.cursor(3)) '/' num2str(dims(3))]);

guidata(hObject,handles)

doCommonUpdate(handles,'z')


% --- Executes during object creation, after setting all properties.
function zslider_CreateFcn(hObject, eventdata, handles)
% hObject    handle to zslider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


% --- Executes on mouse motion over figure - except title and menu.
function mainwin_WindowButtonMotionFcn(hObject, eventdata, handles)
% hObject    handle to mainwin (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

dims=size(handles.combined);

cpx=get(handles.xview,'CurrentPoint');
x=int16(cpx(1,1));
y=int16(cpx(1,2));
if x>=1 && x<=dims(2) && y>=1 && y<=dims(3)
    cursor=[handles.cursor(1), x, dims(3)-y+1];
    set(handles.coords, 'String', num2str(cursor));
    set(handles.bgvalue, 'String', num2str(handles.bg(cursor(1),cursor(2),cursor(3))));
    set(handles.olvalue, 'String', num2str(handles.ol(cursor(1),cursor(2),cursor(3))));
    return
end

cpy=get(handles.yview,'CurrentPoint');
x=int16(cpy(1,1));
y=int16(cpy(1,2));
if x>=1 && x<=dims(3) && y>=1 && y<=dims(1)
    cursor=[x, handles.cursor(2), dims(3)-y+1];
    set(handles.coords, 'String', num2str(cursor));
    set(handles.bgvalue, 'String', num2str(handles.bg(cursor(1),cursor(2),cursor(3))));
    set(handles.olvalue, 'String', num2str(handles.ol(cursor(1),cursor(2),cursor(3))));
    return
end

cpz=get(handles.zview,'CurrentPoint');
x=int16(cpz(1,1));
y=int16(cpz(1,2));
if x>=1 && x<=dims(1) && y>=1 && y<=dims(2)
    cursor=[x, dims(2)-y+1, handles.cursor(3)];
    set(handles.coords, 'String', num2str(cursor));
    set(handles.bgvalue, 'String', num2str(handles.bg(cursor(1),cursor(2),cursor(3))));
    set(handles.olvalue, 'String', num2str(handles.ol(cursor(1),cursor(2),cursor(3))));
    return
end

cursor=handles.cursor;
set(handles.coords, 'String', num2str(cursor));
set(handles.bgvalue, 'String', num2str(handles.bg(cursor(1),cursor(2),cursor(3))));
set(handles.olvalue, 'String', num2str(handles.ol(cursor(1),cursor(2),cursor(3))));


% --- Executes on mouse press over figure background, over a disabled or
% --- inactive control, or over an axes background.
function mainwin_WindowButtonDownFcn(hObject, eventdata, handles)
% hObject    handle to mainwin (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

dims=size(handles.combined);

cpx=get(handles.xview,'CurrentPoint');
x=int16(cpx(1,1));
y=int16(cpx(1,2));
if x>=1 && x<=dims(2) && y>=1 && y<=dims(3)
    handles.cursor=[handles.cursor(1), x, dims(3)-y+1];
    set(handles.yslider,'Value',x)
    set(handles.zslider,'Value',dims(3)-y+1)
    yslider_Callback(handles.yslider, eventdata, handles);
    zslider_Callback(handles.zslider, eventdata, handles);
    return
end

cpy=get(handles.yview,'CurrentPoint');
x=int16(cpy(1,1));
y=int16(cpy(1,2));
if x>=1 && x<=dims(3) && y>=1 && y<=dims(1)
    handles.cursor=[x, handles.cursor(2), dims(3)-y+1];
    set(handles.xslider,'Value',x)
    set(handles.zslider,'Value',dims(3)-y+1)
    xslider_Callback(handles.xslider, eventdata, handles);
    zslider_Callback(handles.zslider, eventdata, handles);
    return
end

cpz=get(handles.zview,'CurrentPoint');
x=int16(cpz(1,1));
y=int16(cpz(1,2));
if x>=1 && x<=dims(1) && y>=1 && y<=dims(2)
    handles.cursor=[x, dims(2)-y+1, handles.cursor(3)];
    set(handles.xslider,'Value',x)
    set(handles.yslider,'Value',dims(2)-y+1)
    xslider_Callback(handles.xslider, eventdata, handles);
    yslider_Callback(handles.yslider, eventdata, handles);
    return
end


% --- Draw lines
function doCommonUpdate(handles,caller)

dims=size(handles.combined);

set(handles.coords, 'String', num2str(handles.cursor));
set(handles.bgvalue, 'String', num2str(handles.bg(handles.cursor(1),handles.cursor(2),handles.cursor(3))));
set(handles.olvalue, 'String', num2str(handles.ol(handles.cursor(1),handles.cursor(2),handles.cursor(3))));

if caller ~= 'x'
hline = findobj(handles.xview, 'Type','line','Tag','HCursor');
vline = findobj(handles.xview, 'Type','line','Tag','VCursor');
set(hline, 'XData',get(handles.xview,'XLim'), 'YData',dims(3)-[handles.cursor(3) handles.cursor(3)]+1);
set(vline, 'XData',[handles.cursor(2) handles.cursor(2)], 'YData',get(handles.xview,'YLim'));
end

if caller ~= 'y'
hline = findobj(handles.yview, 'Type','line','Tag','HCursor');
vline = findobj(handles.yview, 'Type','line','Tag','VCursor');
set(hline, 'XData',get(handles.yview,'XLim'), 'YData',dims(3)-[handles.cursor(3) handles.cursor(3)]+1);
set(vline, 'XData',[handles.cursor(1) handles.cursor(1)], 'YData',get(handles.yview,'YLim'));
end

if caller ~= 'z'
hline = findobj(handles.zview, 'Type','line','Tag','HCursor');
vline = findobj(handles.zview, 'Type','line','Tag','VCursor');
set(hline, 'XData',get(handles.zview,'XLim'), 'YData',dims(2)-[handles.cursor(2) handles.cursor(2)]+1);
set(vline, 'XData',[handles.cursor(1) handles.cursor(1)], 'YData',get(handles.zview,'YLim'));
end


% --- Creates and returns a handle to the GUI figure. 
function h1 = display3d_LayoutFcn(policy)
% policy - create a new figure or use a singleton. 'new' or 'reuse'.

persistent hsingleton;
if strcmpi(policy, 'reuse') & ishandle(hsingleton)
    h1 = hsingleton;
    return;
end

appdata = [];
appdata.GUIDEOptions = struct(...
    'active_h', [], ...
    'taginfo', struct(...
    'figure', 2, ...
    'axes', 9, ...
    'pushbutton', 2, ...
    'slider', 4, ...
    'text', 10), ...
    'override', 0, ...
    'release', 13, ...
    'resize', 'none', ...
    'accessibility', 'callback', ...
    'mfile', 1, ...
    'callbacks', 1, ...
    'singleton', 1, ...
    'syscolorfig', 1, ...
    'blocking', 0, ...
    'lastSavedFile', '', ...
    'lastFilename', '');
appdata.lastValidTag = 'mainwin';
appdata.GUIDELayoutEditor = [];
appdata.initTags = struct(...
    'handle', [], ...
    'tag', 'mainwin');

h1 = figure(...
'Color',[0.941176470588235 0.941176470588235 0.941176470588235],...
'Colormap',[0 0 0.5625;0 0 0.625;0 0 0.6875;0 0 0.75;0 0 0.8125;0 0 0.875;0 0 0.9375;0 0 1;0 0.0625 1;0 0.125 1;0 0.1875 1;0 0.25 1;0 0.3125 1;0 0.375 1;0 0.4375 1;0 0.5 1;0 0.5625 1;0 0.625 1;0 0.6875 1;0 0.75 1;0 0.8125 1;0 0.875 1;0 0.9375 1;0 1 1;0.0625 1 1;0.125 1 0.9375;0.1875 1 0.875;0.25 1 0.8125;0.3125 1 0.75;0.375 1 0.6875;0.4375 1 0.625;0.5 1 0.5625;0.5625 1 0.5;0.625 1 0.4375;0.6875 1 0.375;0.75 1 0.3125;0.8125 1 0.25;0.875 1 0.1875;0.9375 1 0.125;1 1 0.0625;1 1 0;1 0.9375 0;1 0.875 0;1 0.8125 0;1 0.75 0;1 0.6875 0;1 0.625 0;1 0.5625 0;1 0.5 0;1 0.4375 0;1 0.375 0;1 0.3125 0;1 0.25 0;1 0.1875 0;1 0.125 0;1 0.0625 0;1 0 0;0.9375 0 0;0.875 0 0;0.8125 0 0;0.75 0 0;0.6875 0 0;0.625 0 0;0.5625 0 0],...
'IntegerHandle','off',...
'InvertHardcopy',get(0,'defaultfigureInvertHardcopy'),...
'MenuBar','none',...
'Name','Display results',...
'NumberTitle','off',...
'PaperPosition',get(0,'defaultfigurePaperPosition'),...
'Position',[520 439 980 360],...
'Resize','off',...
'WindowButtonDownFcn',@(hObject,eventdata)display3d('mainwin_WindowButtonDownFcn',hObject,eventdata,guidata(hObject)),...
'WindowButtonMotionFcn',@(hObject,eventdata)display3d('mainwin_WindowButtonMotionFcn',hObject,eventdata,guidata(hObject)),...
'HandleVisibility','callback',...
'Interruptible','off',...
'UserData',[],...
'Tag','mainwin',...
'Visible','on',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'zview';

h2 = axes(...
'Parent',h1,...
'Units','pixels',...
'Position',[720 99 241 241],...
'Box','on',...
'CameraPosition',[0.5 0.5 -8.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'Color',get(0,'defaultaxesColor'),...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'LooseInset',[99.32 59.4 72.58 40.5],...
'XColor',get(0,'defaultaxesXColor'),...
'XAxisLocation','top',...
'XTick',[],...
'XTickLabel',{  blanks(0); '0.2'; '0.4'; '0.6'; '0.8'; '1' },...
'XTickLabelMode','manual',...
'XTickMode','manual',...
'YColor',get(0,'defaultaxesYColor'),...
'YDir','reverse',...
'YTick',[],...
'YTickLabel',{  blanks(0); '0.2'; '0.4'; '0.6'; '0.8'; '1' },...
'YTickLabelMode','manual',...
'YTickMode','manual',...
'ZColor',get(0,'defaultaxesZColor'),...
'ZDir','reverse',...
'ZTick',[],...
'ZTickMode','manual',...
'Tag','zview',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

h3 = get(h2,'title');

set(h3,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.5 -0.0477178423236515 -5.4599372052877e-05],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h4 = get(h2,'xlabel');

set(h4,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0.15 0.15 0.15],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.495850622406639 -0.0186721991701246 -5.4599372052877e-05],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...18
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h5 = get(h2,'ylabel');

set(h5,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0.15 0.15 0.15],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.0269709543568464 0.504149377593361 -5.4599372052877e-05],...
'Rotation',90,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h6 = get(h2,'zlabel');

set(h6,...
'Parent',h2,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0.15 0.15 0.15],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-2.8195020746888 -0.0809128630705396 -5.4599372052877e-05],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','middle',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.lastValidTag = 'xview';

h7 = axes(...
'Parent',h1,...
'Units','pixels',...
'Position',[200 99 241 241],...
'Box','on',...
'CameraPosition',[0.5 0.5 -8.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'Color',get(0,'defaultaxesColor'),...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'LooseInset',[99.32 59.4 72.58 40.5],...
'XColor',get(0,'defaultaxesXColor'),...
'XAxisLocation','top',...
'XTick',[],...
'XTickLabel',{  blanks(0); '0.2'; '0.4'; '0.6'; '0.8'; '1' },...
'XTickLabelMode','manual',...
'XTickMode','manual',...
'YColor',get(0,'defaultaxesYColor'),...
'YDir','reverse',...
'YTick',[],...
'YTickLabel',{  blanks(0); '0.2'; '0.4'; '0.6'; '0.8'; '1' },...
'YTickLabelMode','manual',...
'YTickMode','manual',...
'ZColor',get(0,'defaultaxesZColor'),...
'ZDir','reverse',...
'ZTick',[],...
'ZTickMode','manual',...
'Tag','xview',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

h8 = get(h7,'title');

set(h8,...
'Parent',h7,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.5 -0.0477178423236515 -5.4599372052877e-05],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h9 = get(h7,'xlabel');

set(h9,...
'Parent',h7,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0.15 0.15 0.15],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.495850622406639 -0.0186721991701246 -5.4599372052877e-05],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h10 = get(h7,'ylabel');

set(h10,...
'Parent',h7,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0.15 0.15 0.15],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.0269709543568465 0.504149377593361 -5.4599372052877e-05],...
'Rotation',90,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h11 = get(h7,'zlabel');

set(h11,...
'Parent',h7,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0.15 0.15 0.15],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.661825726141079 -0.0809128630705396 -5.4599372052877e-05],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','middle',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.lastValidTag = 'yview';

h12 = axes(...
'Parent',h1,...
'Units','pixels',...
'Position',[460 99 241 241],...
'Box','on',...
'CameraPosition',[0.5 0.5 -8.16025403784439],...
'CameraPositionMode',get(0,'defaultaxesCameraPositionMode'),...
'Color',get(0,'defaultaxesColor'),...
'ColorOrder',get(0,'defaultaxesColorOrder'),...
'LooseInset',[99.32 59.4 72.58 40.5],...
'XColor',get(0,'defaultaxesXColor'),...
'XAxisLocation','top',...
'XTick',[],...
'XTickLabel',{  blanks(0); '0.2'; '0.4'; '0.6'; '0.8'; '1' },...
'XTickLabelMode','manual',...
'XTickMode','manual',...
'YColor',get(0,'defaultaxesYColor'),...
'YDir','reverse',...
'YTick',[],...
'YTickLabel',{  blanks(0); '0.2'; '0.4'; '0.6'; '0.8'; '1' },...
'YTickLabelMode','manual',...
'YTickMode','manual',...
'ZColor',get(0,'defaultaxesZColor'),...
'ZDir','reverse',...
'ZTick',[],...
'ZTickMode','manual',...
'Tag','yview',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

h13 = get(h12,'title');

set(h13,...
'Parent',h12,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0 0 0],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.5 -0.0477178423236515 -5.4599372052877e-05],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h14 = get(h12,'xlabel');

set(h14,...
'Parent',h12,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0.15 0.15 0.15],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[0.495850622406639 -0.0186721991701246 -5.4599372052877e-05],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h15 = get(h12,'ylabel');

set(h15,...
'Parent',h12,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0.15 0.15 0.15],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-0.0269709543568468 0.504149377593361 -5.4599372052877e-05],...
'Rotation',90,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','bottom',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','on',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

h16 = get(h12,'zlabel');

set(h16,...
'Parent',h12,...
'Units','data',...
'FontUnits','points',...
'BackgroundColor','none',...
'Color',[0.15 0.15 0.15],...
'DisplayName',blanks(0),...
'EdgeColor','none',...
'EraseMode','normal',...
'DVIMode','auto',...
'FontAngle','normal',...
'FontName','Helvetica',...
'FontSize',10,...
'FontWeight','normal',...
'HorizontalAlignment','center',...
'LineStyle','-',...
'LineWidth',0.5,...
'Margin',2,...
'Position',[-1.74066390041494 -0.0809128630705396 -5.4599372052877e-05],...
'Rotation',0,...
'String',blanks(0),...
'Interpreter','tex',...
'VerticalAlignment','middle',...
'ButtonDownFcn',[],...
'CreateFcn', {@local_CreateFcn, [], ''} ,...
'DeleteFcn',[],...
'BusyAction','queue',...
'HandleVisibility','off',...
'HelpTopicKey',blanks(0),...
'HitTest','on',...
'Interruptible','on',...
'SelectionHighlight','on',...
'Serializable','on',...
'Tag',blanks(0),...
'UserData',[],...
'Visible','off',...
'XLimInclude','on',...
'YLimInclude','on',...
'ZLimInclude','on',...
'CLimInclude','on',...
'ALimInclude','on',...
'IncludeRenderer','on',...
'Clipping','off');

appdata = [];
appdata.lastValidTag = 'zslider';

h17 = uicontrol(...
'Parent',h1,...
'BackgroundColor',[0.9 0.9 0.9],...
'Callback',@(hObject,eventdata)display3d('zslider_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[720 19 241 21],...
'String',{  'Slider' },...
'Style','slider',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)display3d('zslider_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Interruptible','off',...
'Tag','zslider');

appdata = [];
appdata.lastValidTag = 'xslider';

h18 = uicontrol(...
'Parent',h1,...
'BackgroundColor',[0.9 0.9 0.9],...
'Callback',@(hObject,eventdata)display3d('xslider_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[200 19 241 21],...
'String',{  'Slider' },...
'Style','slider',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)display3d('xslider_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Interruptible','off',...
'Tag','xslider');

appdata = [];
appdata.lastValidTag = 'yslider';

h19 = uicontrol(...
'Parent',h1,...
'BackgroundColor',[0.9 0.9 0.9],...
'Callback',@(hObject,eventdata)display3d('yslider_Callback',hObject,eventdata,guidata(hObject)),...
'Position',[460 19 241 21],...
'String',{  'Slider' },...
'Style','slider',...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)display3d('yslider_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Interruptible','off',...
'Tag','yslider');

appdata = [];
appdata.lastValidTag = 'coords';

h20 = uicontrol(...
'Parent',h1,...
'Position',[20 239 161 21],...
'String',blanks(0),...
'Style','text',...
'Tag','coords',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'bgvalue';

h21 = uicontrol(...
'Parent',h1,...
'FontWeight','bold',...
'ForegroundColor',[0.47843137254902 0.0627450980392157 0.894117647058824],...
'Position',[20 199 161 21],...
'String',blanks(0),...
'Style','text',...
'Tag','bgvalue',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'xlabel';

h22 = uicontrol(...
'Parent',h1,...
'HorizontalAlignment','left',...
'Position',[200 59 241 21],...
'String','X',...
'Style','text',...
'Tag','xlabel',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'ylabel';

h23 = uicontrol(...
'Parent',h1,...
'HorizontalAlignment','left',...
'Position',[460 59 241 21],...
'String','Y',...
'Style','text',...
'Tag','ylabel',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'zlabel';

h24 = uicontrol(...
'Parent',h1,...
'HorizontalAlignment','left',...
'Position',[720 59 241 21],...
'String','Z',...
'Style','text',...
'Tag','zlabel',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'olvalue';

h25 = uicontrol(...
'Parent',h1,...
'FontWeight','bold',...
'ForegroundColor',[0.47843137254902 0.0627450980392157 0.894117647058824],...
'Position',[20 159 161 21],...
'String',blanks(0),...
'Style','text',...
'Tag','olvalue',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'text7';

h26 = uicontrol(...
'Parent',h1,...
'Position',[20 259 161 21],...
'String','Coordinates',...
'Style','text',...
'Tag','text7',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'text8';

h27 = uicontrol(...
'Parent',h1,...
'Position',[20 219 161 21],...
'String','Atlas',...
'Style','text',...
'Tag','text8',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'text9';

h28 = uicontrol(...
'Parent',h1,...
'Position',[20 179 161 21],...
'String','FDR-corrected P-value',...
'Style','text',...
'Tag','text9',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );


hsingleton = h1;


% --- Set application data first then calling the CreateFcn. 
function local_CreateFcn(hObject, eventdata, createfcn, appdata)

if ~isempty(appdata)
   names = fieldnames(appdata);
   for i=1:length(names)
       name = char(names(i));
       setappdata(hObject, name, getfield(appdata,name));
   end
end

if ~isempty(createfcn)
   if isa(createfcn,'function_handle')
       createfcn(hObject, eventdata);
   else
       eval(createfcn);
   end
end


% --- Handles default GUIDE GUI creation and callback dispatch
function varargout = gui_mainfcn(gui_State, varargin)

gui_StateFields =  {'gui_Name'
    'gui_Singleton'
    'gui_OpeningFcn'
    'gui_OutputFcn'
    'gui_LayoutFcn'
    'gui_Callback'};
gui_Mfile = '';
for i=1:length(gui_StateFields)
    if ~isfield(gui_State, gui_StateFields{i})
        error(message('MATLAB:guide:StateFieldNotFound', gui_StateFields{ i }, gui_Mfile));
    elseif isequal(gui_StateFields{i}, 'gui_Name')
        gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
    end
end

numargin = length(varargin);

if numargin == 0
    % DISPLAY3D
    % create the GUI only if we are not in the process of loading it
    % already
    gui_Create = true;
elseif local_isInvokeActiveXCallback(gui_State, varargin{:})
    % DISPLAY3D(ACTIVEX,...)
    vin{1} = gui_State.gui_Name;
    vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
    vin{3} = varargin{1};
    vin{4} = varargin{end-1};
    vin{5} = guidata(varargin{1}.Peer);
    feval(vin{:});
    return;
elseif local_isInvokeHGCallback(gui_State, varargin{:})
    % DISPLAY3D('CALLBACK',hObject,eventData,handles,...)
    gui_Create = false;
else
    % DISPLAY3D(...)
    % create the GUI and hand varargin to the openingfcn
    gui_Create = true;
end

if ~gui_Create
    % In design time, we need to mark all components possibly created in
    % the coming callback evaluation as non-serializable. This way, they
    % will not be brought into GUIDE and not be saved in the figure file
    % when running/saving the GUI from GUIDE.
    designEval = false;
    if (numargin>1 && ishghandle(varargin{2}))
        fig = varargin{2};
        while ~isempty(fig) && ~ishghandle(fig)
            fig = get(fig,'parent');
        end
        
        designEval = isappdata(0,'CreatingGUIDEFigure') || isprop(fig,'__GUIDEFigure');
    end
        
    if designEval
        beforeChildren = findall(fig);
    end
    
    % evaluate the callback now
    varargin{1} = gui_State.gui_Callback;
    if nargout
        [varargout{1:nargout}] = feval(varargin{:});
    else       
        feval(varargin{:});
    end
    
    % Set serializable of objects created in the above callback to off in
    % design time. Need to check whether figure handle is still valid in
    % case the figure is deleted during the callback dispatching.
    if designEval && ishghandle(fig)
        set(setdiff(findall(fig),beforeChildren), 'Serializable','off');
    end
else
    if gui_State.gui_Singleton
        gui_SingletonOpt = 'reuse';
    else
        gui_SingletonOpt = 'new';
    end

    % Check user passing 'visible' P/V pair first so that its value can be
    % used by oepnfig to prevent flickering
    gui_Visible = 'auto';
    gui_VisibleInput = '';
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        % Recognize 'visible' P/V pair
        len1 = min(length('visible'),length(varargin{index}));
        len2 = min(length('off'),length(varargin{index+1}));
        if ischar(varargin{index+1}) && strncmpi(varargin{index},'visible',len1) && len2 > 1
            if strncmpi(varargin{index+1},'off',len2)
                gui_Visible = 'invisible';
                gui_VisibleInput = 'off';
            elseif strncmpi(varargin{index+1},'on',len2)
                gui_Visible = 'visible';
                gui_VisibleInput = 'on';
            end
        end
    end
    
    % Open fig file with stored settings.  Note: This executes all component
    % specific CreateFunctions with an empty HANDLES structure.

    
    % Do feval on layout code in m-file if it exists
    gui_Exported = ~isempty(gui_State.gui_LayoutFcn);
    % this application data is used to indicate the running mode of a GUIDE
    % GUI to distinguish it from the design mode of the GUI in GUIDE. it is
    % only used by actxproxy at this time.   
    setappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]),1);
    if gui_Exported
        gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);

        % make figure invisible here so that the visibility of figure is
        % consistent in OpeningFcn in the exported GUI case
        if isempty(gui_VisibleInput)
            gui_VisibleInput = get(gui_hFigure,'Visible');
        end
        set(gui_hFigure,'Visible','off')

        % openfig (called by local_openfig below) does this for guis without
        % the LayoutFcn. Be sure to do it here so guis show up on screen.
        movegui(gui_hFigure,'onscreen');
    else
        gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        % If the figure has InGUIInitialization it was not completely created
        % on the last pass.  Delete this handle and try again.
        if isappdata(gui_hFigure, 'InGUIInitialization')
            delete(gui_hFigure);
            gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        end
    end
    if isappdata(0, genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]))
        rmappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]));
    end

    % Set flag to indicate starting GUI initialization
    setappdata(gui_hFigure,'InGUIInitialization',1);

    % Fetch GUIDE Application options
    gui_Options = getappdata(gui_hFigure,'GUIDEOptions');
    % Singleton setting in the GUI M-file takes priority if different
    gui_Options.singleton = gui_State.gui_Singleton;

    if ~isappdata(gui_hFigure,'GUIOnScreen')
        % Adjust background color
        if gui_Options.syscolorfig
            set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
        end

        % Generate HANDLES structure and store with GUIDATA. If there is
        % user set GUI data already, keep that also.
        data = guidata(gui_hFigure);
        handles = guihandles(gui_hFigure);
        if ~isempty(handles)
            if isempty(data)
                data = handles;
            else
                names = fieldnames(handles);
                for k=1:length(names)
                    data.(char(names(k)))=handles.(char(names(k)));
                end
            end
        end
        guidata(gui_hFigure, data);
    end

    % Apply input P/V pairs other than 'visible'
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        len1 = min(length('visible'),length(varargin{index}));
        if ~strncmpi(varargin{index},'visible',len1)
            try set(gui_hFigure, varargin{index}, varargin{index+1}), catch break, end
        end
    end

    % If handle visibility is set to 'callback', turn it on until finished
    % with OpeningFcn
    gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
    if strcmp(gui_HandleVisibility, 'callback')
        set(gui_hFigure,'HandleVisibility', 'on');
    end

    feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        % Handle the default callbacks of predefined toolbar tools in this
        % GUI, if any
        guidemfile('restoreToolbarToolPredefinedCallback',gui_hFigure); 
        
        % Update handle visibility
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);

        % Call openfig again to pick up the saved visibility or apply the
        % one passed in from the P/V pairs
        if ~gui_Exported
            gui_hFigure = local_openfig(gui_State.gui_Name, 'reuse',gui_Visible);
        elseif ~isempty(gui_VisibleInput)
            set(gui_hFigure,'Visible',gui_VisibleInput);
        end
        if strcmpi(get(gui_hFigure, 'Visible'), 'on')
            figure(gui_hFigure);
            
            if gui_Options.singleton
                setappdata(gui_hFigure,'GUIOnScreen', 1);
            end
        end

        % Done with GUI initialization
        if isappdata(gui_hFigure,'InGUIInitialization')
            rmappdata(gui_hFigure,'InGUIInitialization');
        end

        % If handle visibility is set to 'callback', turn it on until
        % finished with OutputFcn
        gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
        if strcmp(gui_HandleVisibility, 'callback')
            set(gui_hFigure,'HandleVisibility', 'on');
        end
        gui_Handles = guidata(gui_hFigure);
    else
        gui_Handles = [];
    end

    if nargout
        [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    else
        feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    end

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
    end
end

function gui_hFigure = local_openfig(name, singleton, visible)

% openfig with three arguments was new from R13. Try to call that first, if
% failed, try the old openfig.
if nargin('openfig') == 2
    % OPENFIG did not accept 3rd input argument until R13,
    % toggle default figure visible to prevent the figure
    % from showing up too soon.
    gui_OldDefaultVisible = get(0,'defaultFigureVisible');
    set(0,'defaultFigureVisible','off');
    gui_hFigure = openfig(name, singleton);
    set(0,'defaultFigureVisible',gui_OldDefaultVisible);
else
    gui_hFigure = openfig(name, singleton, visible);  
    %workaround for CreateFcn not called to create ActiveX
    if feature('HGUsingMATLABClasses')
        peers=findobj(findall(allchild(gui_hFigure)),'type','uicontrol','style','text');    
        for i=1:length(peers)
            if isappdata(peers(i),'Control')
                actxproxy(peers(i));
            end            
        end
    end
end

function result = local_isInvokeActiveXCallback(gui_State, varargin)

try
    result = ispc && iscom(varargin{1}) ...
             && isequal(varargin{1},gcbo);
catch
    result = false;
end

function result = local_isInvokeHGCallback(gui_State, varargin)

try
    fhandle = functions(gui_State.gui_Callback);
    result = ~isempty(findstr(gui_State.gui_Name,fhandle.file)) || ...
             (ischar(varargin{1}) ...
             && isequal(ishghandle(varargin{2}), 1) ...
             && (~isempty(strfind(varargin{1},[get(varargin{2}, 'Tag'), '_'])) || ...
                ~isempty(strfind(varargin{1}, '_CreateFcn'))) );
catch
    result = false;
end


